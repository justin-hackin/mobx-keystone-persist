{"version":3,"file":"mobx-keystone-persist.cjs.production.min.js","sources":["../src/asyncLocalStorage.ts","../src/persist.ts","../src/constants.ts","../src/utils.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/createMigrate.ts"],"sourcesContent":["// using istanbul ignore on portions of code that are not currently used internally\n\ninterface IAsyncLocalStorage {\n  clear(): Promise<void>;\n  getItem(key: string): Promise<string>;\n  removeItem(key: string): Promise<void>;\n  setItem(key: string, value: string): Promise<void>;\n}\n\nexport const AsyncLocalStorage: IAsyncLocalStorage = {\n  // must use wrapper functions when passing localStorage functions (https://github.com/agilgur5/mst-persist/issues/18)\n  clear /* istanbul ignore next */() {\n    return callWithPromise(() => window.localStorage.clear());\n  },\n  getItem(key) {\n    return callWithPromise(() => window.localStorage.getItem(key));\n  },\n  removeItem /* istanbul ignore next */(key) {\n    return callWithPromise(() => window.localStorage.removeItem(key));\n  },\n  setItem(key, value) {\n    return callWithPromise(() => window.localStorage.setItem(key, value));\n  },\n};\n\nfunction callWithPromise(func: Function, ...args: any[]): Promise<any> {\n  try {\n    return Promise.resolve(func(...args));\n  } catch (err) {\n    /* istanbul ignore next */\n    return Promise.reject(err);\n  }\n}\n\nexport default AsyncLocalStorage;\n","import {\n  applySnapshot,\n  getSnapshot,\n  modelIdKey,\n  modelTypeKey,\n  onSnapshot,\n} from \"mobx-keystone\";\n\nimport AsyncLocalStorage from \"./asyncLocalStorage\";\nimport { AnySnapshot, Migrator, PersistedState, VersionCode } from \"./types\";\nimport { DEFAULT_VERSION } from \"./constants\";\nimport { isSnapshot, isString } from \"./utils\";\nimport debounce from \"lodash.debounce\";\n\nexport interface IArgs {\n  (name: string, store: any, options?: IOptions): Promise<void>;\n}\n\nexport interface IOptions {\n  version?: VersionCode;\n  storage?: any;\n  jsonify?: boolean;\n  readonly whitelist?: Array<string>;\n  readonly blacklist?: Array<string>;\n  migrate?: Migrator;\n  throttle?: number;\n}\n\nexport const persist: IArgs = async (name, store, options = {}) => {\n  let {\n    storage,\n    jsonify = true,\n    whitelist,\n    blacklist,\n    version = DEFAULT_VERSION,\n    migrate,\n    throttle,\n  } = options;\n\n  // use AsyncLocalStorage by default (or if localStorage was passed in)\n  if (\n    typeof window !== \"undefined\" &&\n    typeof window.localStorage !== \"undefined\" &&\n    (!storage || storage === window.localStorage)\n  ) {\n    storage = AsyncLocalStorage;\n  }\n  if (!storage) {\n    return Promise.reject(\n      \"localStorage (the default storage engine) is not \" +\n        \"supported in this environment. Please configure a different storage \" +\n        \"engine via the `storage:` option.\"\n    );\n  }\n\n  const whitelistSet = new Set(whitelist || []);\n  const blacklistSet = new Set(blacklist || []);\n\n  const persistSnapshot = (_snapshot: AnySnapshot) => {\n    // need to shallow clone as otherwise properties are non-configurable (https://github.com/agilgur5/mst-persist/pull/21#discussion_r348105595)\n    const snapshot = { ..._snapshot };\n    Object.keys(snapshot).forEach((key) => {\n      if (key === modelTypeKey || key === modelIdKey) {\n        return;\n      }\n      if (whitelist && !whitelistSet.has(key)) {\n        delete snapshot[key];\n      }\n      if (blacklist && blacklistSet.has(key)) {\n        delete snapshot[key];\n      }\n    });\n\n    const state: PersistedState = {\n      version: options.version || DEFAULT_VERSION,\n      snapshot,\n    };\n\n    const data = !jsonify ? state : JSON.stringify(state);\n    storage.setItem(name, data);\n  };\n\n  onSnapshot(\n    store,\n    typeof throttle === \"number\"\n      ? debounce(persistSnapshot, throttle)\n      : persistSnapshot\n  );\n\n  const data: object | string = await storage.getItem(name);\n  const stateOrSnapshot = !isString(data) ? data : JSON.parse(data);\n\n  // don't apply falsey (which will error), leave store in initial state\n  if (!stateOrSnapshot) {\n    return;\n  }\n\n  let state: PersistedState;\n\n  // account for pre-migration support\n  if (isSnapshot(stateOrSnapshot)) {\n    state = {\n      version: DEFAULT_VERSION,\n      snapshot: stateOrSnapshot,\n    };\n  } else {\n    state = stateOrSnapshot;\n  }\n\n  if (migrate) {\n    state = await migrate(state, version);\n  }\n\n  const defaults = getSnapshot(store);\n\n  for (const key of Object.keys(state.snapshot)) {\n    if (!(key in defaults)) {\n      console.warn(\n        `mobx-keystone-persist: persisted store contained non-existent key: ${key}`\n      );\n      delete state.snapshot[key];\n    }\n  }\n\n  applySnapshot(store, {\n    ...defaults,\n    ...state.snapshot,\n    $modelId: store.$modelId,\n  });\n};\n","import { VersionCode } from \"./types\";\n\nexport const DEFAULT_VERSION: VersionCode = -1;\n","import { AnySnapshot } from \"./types\";\n\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\nexport function isSnapshot(value: any): value is AnySnapshot {\n  return value && value.$modelId !== undefined;\n}\n\nexport function isPromise(maybePromise: any): maybePromise is PromiseLike<any> {\n  return \"then\" in maybePromise;\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { Migrator, MigrationManifest } from \"./types\";\nimport { DEFAULT_VERSION } from \"./constants\";\nimport { isPromise } from \"./utils\";\n\nexport function createMigrate(\n  migrations: MigrationManifest,\n  options?: { debug: boolean }\n): Migrator {\n  const { debug } = options || {};\n\n  return async (state, currentVersion) => {\n    const inboundVersion =\n      state.version !== undefined ? state.version : DEFAULT_VERSION;\n\n    if (inboundVersion === currentVersion) {\n      if (process.env.NODE_ENV !== \"production\" && debug)\n        console.log(\"mobx-keystone-persist: versions match, noop migration\");\n      return state;\n    }\n\n    if (inboundVersion > currentVersion)\n      throw new Error(\"downgrading version is not supported\");\n\n    const migrationKeys = Object.keys(migrations)\n      .map((ver) => parseInt(ver))\n      .filter((key) => currentVersion >= key && key > inboundVersion)\n      .sort((a, b) => a - b);\n\n    if (process.env.NODE_ENV !== \"production\" && debug)\n      console.log(\"mobx-keystone-persist: migrationKeys\", migrationKeys);\n\n    for (const versionKey of migrationKeys) {\n      if (process.env.NODE_ENV !== \"production\" && debug)\n        console.log(\n          \"mobx-keystone-persist: running migration for versionKey\",\n          versionKey\n        );\n\n      const snapshotOrPromise = migrations[versionKey](state.snapshot);\n\n      state = {\n        version: versionKey,\n        snapshot: isPromise(snapshotOrPromise)\n          ? await snapshotOrPromise\n          : snapshotOrPromise,\n      };\n    }\n\n    return state;\n  };\n}\n"],"names":["AsyncLocalStorage","clear","callWithPromise","window","localStorage","getItem","key","removeItem","setItem","value","func","args","Promise","resolve","err","reject","persist","name","store","options","storage","jsonify","whitelist","blacklist","version","migrate","throttle","whitelistSet","Set","blacklistSet","persistSnapshot","_snapshot","snapshot","Object","keys","forEach","modelTypeKey","modelIdKey","has","state","data","JSON","stringify","onSnapshot","debounce","defaults","getSnapshot","console","warn","applySnapshot","$modelId","stateOrSnapshot","parse","undefined","isSnapshot","_Pact","prototype","then","onFulfilled","onRejected","result","this","s","callback","_settle","v","e","o","_this","pact","bind","observer","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","asyncIterator","migrations","currentVersion","inboundVersion","Error","target","body","check","step","_cycle","next","done","return","_fixup","TypeError","values","i","length","push","array","_forTo","map","ver","parseInt","filter","sort","a","b","versionKey","snapshotOrPromise"],"mappings":"wYASaA,EAAwC,CAEnDC,wBACSC,GAAgB,kBAAMC,OAAOC,aAAaH,YAEnDI,iBAAQC,UACCJ,GAAgB,kBAAMC,OAAOC,aAAaC,QAAQC,OAE3DC,oBAAsCD,UAC7BJ,GAAgB,kBAAMC,OAAOC,aAAaG,WAAWD,OAE9DE,iBAAQF,EAAKG,UACJP,GAAgB,kBAAMC,OAAOC,aAAaI,QAAQF,EAAKG,QAIlE,SAASP,EAAgBQ,kCAAmBC,mCAAAA,2BAEjCC,QAAQC,QAAQH,eAAQC,IAC/B,MAAOG,UAEAF,QAAQG,OAAOD,QCFbE,WAAwBC,EAAMC,EAAOC,YAAAA,IAAAA,EAAU,YAExDC,EAOED,EAPFC,UAOED,EANFE,QAAAA,gBACAC,EAKEH,EALFG,UACAC,EAIEJ,EAJFI,YAIEJ,EAHFK,QAAAA,cChCwC,IDiCxCC,EAEEN,EAFFM,QACAC,EACEP,EADFO,YAKkB,oBAAXvB,aACwB,IAAxBA,OAAOC,cACZgB,GAAWA,IAAYjB,OAAOC,eAEhCgB,EAAUpB,IAEPoB,SACIR,QAAQG,OACb,8JAMEY,EAAe,IAAIC,IAAIN,GAAa,IACpCO,EAAe,IAAID,IAAIL,GAAa,IAEpCO,EAAkB,SAACC,OAEjBC,OAAgBD,GACtBE,OAAOC,KAAKF,GAAUG,SAAQ,SAAC7B,GACzBA,IAAQ8B,gBAAgB9B,IAAQ+B,eAGhCf,IAAcK,EAAaW,IAAIhC,WAC1B0B,EAAS1B,GAEdiB,GAAaM,EAAaS,IAAIhC,WACzB0B,EAAS1B,WAIdiC,EAAwB,CAC5Bf,QAASL,EAAQK,UCxEqB,EDyEtCQ,SAAAA,GAGIQ,EAAQnB,EAAkBoB,KAAKC,UAAUH,GAAvBA,EACxBnB,EAAQZ,QAAQS,EAAMuB,WAGxBG,aACEzB,EACoB,iBAAbQ,EACHkB,EAASd,EAAiBJ,GAC1BI,mBAG8BV,EAAQf,QAAQY,mBAA9CuB,wBAwBAK,EAAWC,cAAY5B,SAEXe,OAAOC,KAAKK,EAAMP,yBAAW,KAApC1B,OACHA,KAAOuC,IACXE,QAAQC,2EACgE1C,UAEjEiC,EAAMP,SAAS1B,IAI1B2C,gBAAc/B,OACT2B,EACAN,EAAMP,UACTkB,SAAUhC,EAAMgC,gBArCZC,EEvFkB,iBFuFUX,EAAQA,EAAOC,KAAKW,MAAMZ,MAGvDW,OAIDZ,EASFA,WEpGuB9B,UAClBA,QAA4B4C,IAAnB5C,EAAMyC,SF6FlBI,CAAWH,GACL,CACN3B,SCpGsC,EDqGtCQ,SAAUmB,GAGJA,sBAGN1B,yBACYA,EAAQc,EAAOf,sBAA7Be,iFG7GG,MAAMgB,EAAqB,WACjC,SAASA,KAiCT,OAhCAA,EAAMC,UAAUC,KAAO,SAASC,EAAaC,GAC5C,MAAMC,EAAS,IAAIL,EACbhB,EAAQsB,KAAKC,EACnB,GAAIvB,EAAO,CACV,MAAMwB,EAAmB,EAARxB,EAAYmB,EAAcC,EAC3C,GAAII,EAAU,CACb,IACCC,EAAQJ,EAAQ,EAAGG,EAASF,KAAKI,IAChC,MAAOC,GACRF,EAAQJ,EAAQ,EAAGM,GAEpB,OAAON,EAEP,OAAOC,KAiBT,OAdAA,KAAKM,EAAI,SAASC,GACjB,IACC,MAAM3D,EAAQ2D,EAAMH,EACN,EAAVG,EAAMN,EACTE,EAAQJ,EAAQ,EAAGF,EAAcA,EAAYjD,GAASA,GAC5CkD,EACVK,EAAQJ,EAAQ,EAAGD,EAAWlD,IAE9BuD,EAAQJ,EAAQ,EAAGnD,GAEnB,MAAOyD,GACRF,EAAQJ,EAAQ,EAAGM,KAGdN,GAEDL,EAlC0B,GAsClC,SAAgBS,EAAQK,EAAM9B,EAAO9B,GACpC,IAAK4D,EAAKP,EAAG,CACZ,GAAIrD,aAAiB8C,EAAO,CAC3B,IAAI9C,EAAMqD,EAOT,YADArD,EAAM0D,EAAIH,EAAQM,KAAK,KAAMD,EAAM9B,IALvB,EAARA,IACHA,EAAQ9B,EAAMqD,GAEfrD,EAAQA,EAAMwD,EAMhB,GAAIxD,GAASA,EAAMgD,KAElB,YADAhD,EAAMgD,KAAKO,EAAQM,KAAK,KAAMD,EAAM9B,GAAQyB,EAAQM,KAAK,KAAMD,EAAM,IAGtEA,EAAKP,EAAIvB,EACT8B,EAAKJ,EAAIxD,EACT,MAAM8D,EAAWF,EAAKF,EAClBI,GACHA,EAASF,IAKL,SAASG,EAAeC,GAC9B,OAAOA,aAAoBlB,GAAsB,EAAbkB,EAASX,EAkG9C,MAAaY,EAAkD,oBAAXC,OAA0BA,OAAOC,WAAaD,OAAOC,SAAWD,OAAO,oBAAuB,aA6D9E,oBAAXA,SAA0BA,OAAOE,gBAAkBF,OAAOE,cAAgBF,OAAO,+EF/N9F,iCGG1CG,EACA3D,mBAIcoB,EAAOwC,WACbC,OACc3B,IAAlBd,EAAMf,QAAwBe,EAAMf,SHVE,KGYpCwD,IAAmBD,yBAGdxC,MAGLyC,EAAiBD,EACnB,MAAM,IAAIE,MAAM,8CDmJtB,SAAuBC,EAAQC,EAAMC,GACpC,GAAuC,mBAA5BF,EAAOR,GAAiC,CAClD,IAA0CW,EAAMhB,EAAMtD,EAAlD6D,EAAWM,EAAOR,KAwBtB,GAvBA,SAASY,EAAO1B,GACf,IACC,OAASyB,EAAOT,EAASW,QAAQC,MAEhC,IADA5B,EAASuB,EAAKE,EAAK5E,SACLmD,EAAOH,KAAM,CAC1B,IAAIe,EAAeZ,GAIlB,YADAA,EAAOH,KAAK6B,EAAQvE,IAAWA,EAASiD,EAAQM,KAAK,KAAMD,EAAO,IAAId,EAAS,KAF/EK,EAASA,EAAOK,EAOfI,EACHL,EAAQK,EAAM,EAAGT,GAEjBS,EAAOT,EAEP,MAAOM,GACRF,EAAQK,IAASA,EAAO,IAAId,GAAU,EAAGW,IAG3CoB,GACIV,EAASa,OAAQ,CACpB,IAAIC,EAAS,SAASjF,GACrB,IACM4E,EAAKG,MACTZ,EAASa,SAET,MAAMvB,IAER,OAAOzD,GAER,GAAI4D,GAAQA,EAAKZ,KAChB,OAAOY,EAAKZ,KAAKiC,GAAQ,SAASxB,GACjC,MAAMwB,EAAOxB,MAGfwB,IAED,OAAOrB,EAGR,KAAM,WAAYa,GACjB,MAAM,IAAIS,UAAU,0BAIrB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIX,EAAOY,OAAQD,IAClCD,EAAOG,KAAKb,EAAOW,IAEpB,OA5GD,SAAuBG,EAAOb,EAAMC,GACnC,IAAYf,EAAMtD,EAAd8E,GAAK,EAwBT,OAvBA,SAASP,EAAO1B,GACf,IACC,OAASiC,EAAIG,EAAMF,QAElB,IADAlC,EAASuB,EAAKU,KACAjC,EAAOH,KAAM,CAC1B,IAAIe,EAAeZ,GAIlB,YADAA,EAAOH,KAAK6B,EAAQvE,IAAWA,EAASiD,EAAQM,KAAK,KAAMD,EAAO,IAAId,EAAS,KAF/EK,EAASA,EAAOK,EAOfI,EACHL,EAAQK,EAAM,EAAGT,GAEjBS,EAAOT,EAEP,MAAOM,GACRF,EAAQK,IAASA,EAAO,IAAId,GAAU,EAAGW,IAG3CoB,GACOjB,EAmFA4B,CAAOL,GAAQ,SAASC,GAAK,OAAOV,EAAKS,EAAOC,QCvM9B5D,OAAOC,KAAK4C,GAC/BoB,KAAI,SAACC,UAAQC,SAASD,MACtBE,QAAO,SAAC/F,UAAQyE,GAAkBzE,GAAOA,EAAM0E,KAC/CsB,MAAK,SAACC,EAAGC,UAAMD,EAAIC,eAKXC,iBASTlE,EAAQ,CACNf,QAASiF,EACTzE,gBAJI0E,EAAoB5B,EAAW2B,GAAYlE,EAAMP,gBF3BpD,SE+BmB0E,kBACVA,aAAAA,iEAKPnE,KAAAA"}